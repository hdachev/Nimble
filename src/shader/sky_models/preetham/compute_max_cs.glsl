#define NUM_THREADS 8

// ------------------------------------------------------------------
// INPUTS -----------------------------------------------------------
// ------------------------------------------------------------------

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// ------------------------------------------------------------------
// INPUT ------------------------------------------------------------
// ------------------------------------------------------------------

layout (binding = 0, rgb32f) uniform image2D i_Table;

// ------------------------------------------------------------------
// UNIFORMS ---------------------------------------------------------
// ------------------------------------------------------------------

uniform int TABLE_SIZE;

// ------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------
// ------------------------------------------------------------------

float theta(int i)
{
    return imageLoad(i_Table, ivec2(TABLE_SIZE + i, 0)).r;
}

// ------------------------------------------------------------------

float gamma(int i)
{
    return imageLoad(i_Table, ivec2(TABLE_SIZE + i, 1)).r;
}

// ------------------------------------------------------------------
// MAIN -------------------------------------------------------------
// ------------------------------------------------------------------

void main()
{
    float max_theta = theta(0);
    float max_gamma = gamma(0);

    for (int i = 1; i < NUM_THREADS; i++)
    {
        float theta = theta(i);
        float gamma = gamma(i);

        if (theta > max_theta)
            max_gamma = theta;

        if (gamma > max_gamma)
            max_gamma = gamma;
    }

    imageStore(i_Table, ivec2(TABLE_SIZE, 0), vec4(max_theta, 0, 0, 0));
    imageStore(i_Table, ivec2(TABLE_SIZE, 1), vec4(max_gamma, 0, 0, 0));

// ------------------------------------------------------------------